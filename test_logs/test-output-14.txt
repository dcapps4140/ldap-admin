# Test run 14 - Tue Aug 19 18:57:19 UTC 2025
# Command: pytest tests/ -v

============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/dcapps/projects/ldap-admin/venv/bin/python3
cachedir: .pytest_cache
rootdir: /home/dcapps/projects/ldap-admin
plugins: cov-6.2.1, mock-3.14.1, flask-1.3.0
collecting ... collected 56 items

tests/test_api_routes.py::TestApiRoutes::test_api_users_get FAILED       [  1%]
tests/test_api_routes.py::TestApiRoutes::test_api_users_post FAILED      [  3%]
tests/test_api_routes.py::TestApiRoutes::test_api_users_delete FAILED    [  5%]
tests/test_api_routes.py::TestApiRoutes::test_api_groups_get FAILED      [  7%]
tests/test_api_routes.py::TestApiRoutes::test_api_stats FAILED           [  8%]
tests/test_api_routes.py::TestApiRoutes::test_api_test_connection FAILED [ 10%]
tests/test_authentication.py::TestAuthentication::test_login_page_loads PASSED [ 12%]
tests/test_authentication.py::TestAuthentication::test_valid_login PASSED [ 14%]
tests/test_authentication.py::TestAuthentication::test_invalid_login PASSED [ 16%]
tests/test_authentication.py::TestAuthentication::test_logout PASSED     [ 17%]
tests/test_authentication.py::TestAuthentication::test_session_management PASSED [ 19%]
tests/test_authentication.py::TestAuthentication::test_protected_route_without_auth PASSED [ 21%]
tests/test_authentication.py::TestAuthentication::test_protected_route_with_auth FAILED [ 23%]
tests/test_authentication.py::TestAuthentication::test_admin_required_routes FAILED [ 25%]
tests/test_authentication.py::TestAuthentication::test_password_reset_request FAILED [ 26%]
tests/test_authentication_auto.py::TestAuthentication::test_get__login PASSED [ 28%]
tests/test_authentication_auto.py::TestAuthentication::test_post__login FAILED [ 30%]
tests/test_authentication_auto.py::TestAuthentication::test_get__logout PASSED [ 32%]
tests/test_basic.py::test_basic_functionality PASSED                     [ 33%]
tests/test_basic.py::test_app_creation PASSED                            [ 35%]
tests/test_basic.py::test_client_creation PASSED                         [ 37%]
tests/test_basic.py::test_sample_data PASSED                             [ 39%]
tests/test_basic.py::test_mock_ldap PASSED                               [ 41%]
tests/test_basic.py::test_app_routes PASSED                              [ 42%]
tests/test_group_management.py::TestGroupManagement::test_group_list_page PASSED [ 44%]
tests/test_group_management.py::TestGroupManagement::test_add_group_form FAILED [ 46%]
tests/test_group_management.py::TestGroupManagement::test_group_membership FAILED [ 48%]
tests/test_group_management.py::TestGroupManagement::test_group_validation PASSED [ 50%]
tests/test_group_management.py::TestGroupManagement::test_group_search PASSED [ 51%]
tests/test_group_management.py::TestGroupManagement::test_group_edit FAILED [ 53%]
tests/test_group_management.py::TestGroupManagement::test_group_delete FAILED [ 55%]
tests/test_group_management.py::TestGroupManagement::test_nested_groups PASSED [ 57%]
tests/test_group_management_auto.py::TestGroupManagement::test_get__groups PASSED [ 58%]
tests/test_group_management_auto.py::TestGroupManagement::test_get__api_groups PASSED [ 60%]
tests/test_other_routes_auto.py::TestOtherRoutes::test_get__ PASSED      [ 62%]
tests/test_other_routes_auto.py::TestOtherRoutes::test_get__settings PASSED [ 64%]
tests/test_other_routes_auto.py::TestOtherRoutes::test_get__api_test_connection PASSED [ 66%]
tests/test_other_routes_auto.py::TestOtherRoutes::test_get__api_stats PASSED [ 67%]
tests/test_page_routes.py::TestPageRoutes::test_index_page PASSED        [ 69%]
tests/test_page_routes.py::TestPageRoutes::test_login_page FAILED        [ 71%]
tests/test_page_routes.py::TestPageRoutes::test_logout_page PASSED       [ 73%]
tests/test_page_routes.py::TestPageRoutes::test_users_page PASSED        [ 75%]
tests/test_page_routes.py::TestPageRoutes::test_groups_page PASSED       [ 76%]
tests/test_page_routes.py::TestPageRoutes::test_settings_page PASSED     [ 78%]
tests/test_page_routes.py::TestPageRoutes::test_authenticated_pages PASSED [ 80%]
tests/test_user_management.py::TestUserManagement::test_user_list_page PASSED [ 82%]
tests/test_user_management.py::TestUserManagement::test_add_user_form FAILED [ 83%]
tests/test_user_management.py::TestUserManagement::test_user_validation PASSED [ 85%]
tests/test_user_management.py::TestUserManagement::test_password_strength PASSED [ 87%]
tests/test_user_management.py::TestUserManagement::test_user_search PASSED [ 89%]
tests/test_user_management.py::TestUserManagement::test_user_edit FAILED [ 91%]
tests/test_user_management.py::TestUserManagement::test_user_delete FAILED [ 92%]
tests/test_user_management_auto.py::TestUserManagement::test_get__users PASSED [ 94%]
tests/test_user_management_auto.py::TestUserManagement::test_get__api_users PASSED [ 96%]
tests/test_user_management_auto.py::TestUserManagement::test_post__api_users PASSED [ 98%]
tests/test_user_management_auto.py::TestUserManagement::test_delete__api_users__username_ PASSED [100%]

=================================== FAILURES ===================================
_______________________ TestApiRoutes.test_api_users_get _______________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7efcff774ee0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625071433120'>

    def test_api_users_get(self, client, mock_ldap_connection):
        """Test GET /api/users endpoint."""
        # Mock user data
        mock_user = Mock()
        mock_user.cn.value = 'testuser'
        mock_user.mail.value = 'test@example.com'
        mock_user.givenName.value = 'Test'
        mock_user.sn.value = 'User'
        mock_ldap_connection.entries = [mock_user]
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.get('/api/users')
>           assert response.status_code in [200, 401, 403]
E           assert 302 in [200, 401, 403]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:20: AssertionError
______________________ TestApiRoutes.test_api_users_post _______________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7efcff7750f0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625069586576'>

    def test_api_users_post(self, client, mock_ldap_connection):
        """Test POST /api/users endpoint."""
        user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'first_name': 'New',
            'last_name': 'User',
            'password': 'SecurePass123!'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/api/users',
                                  data=json.dumps(user_data),
                                  content_type='application/json')
>           assert response.status_code in [201, 400, 401, 403, 409]
E           assert 302 in [201, 400, 401, 403, 409]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:41: AssertionError
_____________________ TestApiRoutes.test_api_users_delete ______________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7efcff775360>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625069999680'>

    def test_api_users_delete(self, client, mock_ldap_connection):
        """Test DELETE /api/users/<username> endpoint."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.delete('/api/users/testuser')
>           assert response.status_code in [200, 401, 403, 404]
E           assert 302 in [200, 401, 403, 404]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:47: AssertionError
______________________ TestApiRoutes.test_api_groups_get _______________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7efcff7755d0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625069672288'>

    def test_api_groups_get(self, client, mock_ldap_connection):
        """Test GET /api/groups endpoint."""
        # Mock group data
        mock_group = Mock()
        mock_group.cn.value = 'testgroup'
        mock_group.description.value = 'Test Group'
        mock_ldap_connection.entries = [mock_group]
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.get('/api/groups')
>           assert response.status_code in [200, 401, 403]
E           assert 302 in [200, 401, 403]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:59: AssertionError
_________________________ TestApiRoutes.test_api_stats _________________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7efcff775840>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625059955088'>

    def test_api_stats(self, client, mock_ldap_connection):
        """Test GET /api/stats endpoint."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.get('/api/stats')
>           assert response.status_code in [200, 401, 403]
E           assert 302 in [200, 401, 403]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:70: AssertionError
____________________ TestApiRoutes.test_api_test_connection ____________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7efcff775ab0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625060036096'>

    def test_api_test_connection(self, client, mock_ldap_connection):
        """Test GET /api/test_connection endpoint."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.get('/api/test_connection')
>           assert response.status_code in [200, 401, 403]
E           assert 404 in [200, 401, 403]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_api_routes.py:81: AssertionError
______________ TestAuthentication.test_protected_route_with_auth _______________

self = <tests.test_authentication.TestAuthentication object at 0x7efcff42a110>
authenticated_client = <FlaskClient <Flask 'app'>>

    def test_protected_route_with_auth(self, authenticated_client):
        """Test accessing protected route with authentication."""
        response = authenticated_client.get('/dashboard')
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:70: AssertionError
________________ TestAuthentication.test_admin_required_routes _________________

self = <tests.test_authentication.TestAuthentication object at 0x7efcff42a380>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625060117488'>

    def test_admin_required_routes(self, client, mock_ldap_connection):
        """Test routes that require admin privileges."""
        # Test without admin privileges
        with client.session_transaction() as sess:
            sess['user'] = 'regularuser'
            sess['authenticated'] = True
            sess['is_admin'] = False
    
        response = client.get('/admin')
>       assert response.status_code in [302, 403]
E       assert 404 in [302, 403]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:81: AssertionError
________________ TestAuthentication.test_password_reset_request ________________

self = <tests.test_authentication.TestAuthentication object at 0x7efcff42a5c0>
client = <FlaskClient <Flask 'app'>>

    def test_password_reset_request(self, client):
        """Test password reset request."""
        reset_data = {'email': 'user@example.com'}
        response = client.post('/reset_password', data=reset_data)
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:87: AssertionError
_____________________ TestAuthentication.test_post__login ______________________

self = <tests.test_authentication_auto.TestAuthentication object at 0x7efcff429420>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625069665952'>

    def test_post__login(self, client, mock_ldap_connection):
        """Test POST /login"""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            # Login data
            data = {
                'username': 'testuser',
                'password': 'password'
            }
            response = client.post('/login', data=data)
>           assert response.status_code in [200, 302]  # Success or redirect
E           assert 429 in [200, 302]
E            +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_authentication_auto.py:23: AssertionError
___________________ TestGroupManagement.test_add_group_form ____________________

self = <tests.test_group_management.TestGroupManagement object at 0x7efcff44c1c0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625069671520'>

    def test_add_group_form(self, client, mock_ldap_connection):
        """Test add group form submission."""
        group_data = {
            'name': 'newgroup',
            'description': 'New Test Group',
            'members': ['user1', 'user2']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_group', data=group_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:30: AssertionError
__________________ TestGroupManagement.test_group_membership ___________________

self = <tests.test_group_management.TestGroupManagement object at 0x7efcff44c460>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625059944288'>
sample_group_data = {'description': 'Test Group Description', 'members': ['testuser1', 'testuser2'], 'name': 'testgroup'}

    def test_group_membership(self, client, mock_ldap_connection, sample_group_data):
        """Test group membership management."""
        # Test adding user to group
        membership_data = {
            'group': sample_group_data['name'],
            'user': 'newuser',
            'action': 'add'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/manage_membership', data=membership_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:43: AssertionError
_____________________ TestGroupManagement.test_group_edit ______________________

self = <tests.test_group_management.TestGroupManagement object at 0x7efcff44cb80>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625060039984'>

    def test_group_edit(self, client, mock_ldap_connection):
        """Test group editing."""
        edit_data = {
            'description': 'Updated Group Description',
            'members': ['user1', 'user2', 'user3']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_group/testgroup', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:66: AssertionError
____________________ TestGroupManagement.test_group_delete _____________________

self = <tests.test_group_management.TestGroupManagement object at 0x7efcff42b400>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625060097792'>

    def test_group_delete(self, client, mock_ldap_connection):
        """Test group deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_group/testgroup')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:72: AssertionError
________________________ TestPageRoutes.test_login_page ________________________

self = <tests.test_page_routes.TestPageRoutes object at 0x7efcff44e140>
client = <FlaskClient <Flask 'app'>>

    def test_login_page(self, client):
        """Test login page."""
        response = client.get('/login')
>       assert response.status_code == 200
E       assert 429 == 200
E        +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_page_routes.py:15: AssertionError
____________________ TestUserManagement.test_add_user_form _____________________

self = <tests.test_user_management.TestUserManagement object at 0x7efcff44d180>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625069658560'>

    def test_add_user_form(self, client, mock_ldap_connection):
        """Test add user form submission."""
        user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'first_name': 'New',
            'last_name': 'User',
            'password': 'SecurePass123!',
            'confirm_password': 'SecurePass123!'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_user', data=user_data, follow_redirects=True)
            # Should either succeed or redirect to login
>           assert response.status_code == 200
E           assert 404 == 200
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:36: AssertionError
______________________ TestUserManagement.test_user_edit _______________________

self = <tests.test_user_management.TestUserManagement object at 0x7efcff44f5e0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625060649472'>

    def test_user_edit(self, client, mock_ldap_connection):
        """Test user editing."""
        edit_data = {
            'email': 'updated@example.com',
            'first_name': 'Updated',
            'last_name': 'User'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_user/testuser', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:74: AssertionError
_____________________ TestUserManagement.test_user_delete ______________________

self = <tests.test_user_management.TestUserManagement object at 0x7efcff44f850>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='139625060634048'>

    def test_user_delete(self, client, mock_ldap_connection):
        """Test user deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_user/testuser')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:80: AssertionError
=============================== warnings summary ===============================
tests/test_api_routes.py::TestApiRoutes::test_api_users_get
tests/test_api_routes.py::TestApiRoutes::test_api_users_get
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_wtf/recaptcha/widgets.py:2: DeprecationWarning: 'flask.Markup' is deprecated and will be removed in Flask 2.4. Import 'markupsafe.Markup' instead.
    from flask import Markup

tests/test_api_routes.py::TestApiRoutes::test_api_users_get
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
    warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_api_routes.py::TestApiRoutes::test_api_users_get
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
    warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_api_routes.py::TestApiRoutes::test_api_users_get
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_limiter/extension.py:336: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_users_get - assert 3...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_users_post - assert ...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_users_delete - asser...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_groups_get - assert ...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_stats - assert 302 i...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_test_connection - as...
FAILED tests/test_authentication.py::TestAuthentication::test_protected_route_with_auth
FAILED tests/test_authentication.py::TestAuthentication::test_admin_required_routes
FAILED tests/test_authentication.py::TestAuthentication::test_password_reset_request
FAILED tests/test_authentication_auto.py::TestAuthentication::test_post__login
FAILED tests/test_group_management.py::TestGroupManagement::test_add_group_form
FAILED tests/test_group_management.py::TestGroupManagement::test_group_membership
FAILED tests/test_group_management.py::TestGroupManagement::test_group_edit
FAILED tests/test_group_management.py::TestGroupManagement::test_group_delete
FAILED tests/test_page_routes.py::TestPageRoutes::test_login_page - assert 42...
FAILED tests/test_user_management.py::TestUserManagement::test_add_user_form
FAILED tests/test_user_management.py::TestUserManagement::test_user_edit - as...
FAILED tests/test_user_management.py::TestUserManagement::test_user_delete - ...
================== 18 failed, 38 passed, 5 warnings in 1.81s ===================

# End of test run 14 - Tue Aug 19 18:57:21 UTC 2025
