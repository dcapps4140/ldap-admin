# Test run 20 - Tue Aug 19 19:53:24 UTC 2025
# Command: pytest tests/ --cov=app --cov-report=html -v

============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/dcapps/projects/ldap-admin/venv/bin/python3
cachedir: .pytest_cache
rootdir: /home/dcapps/projects/ldap-admin
plugins: cov-6.2.1, mock-3.14.1, flask-1.3.0
collecting ... collected 73 items

tests/test_api_routes.py::TestApiRoutes::test_api_users_get FAILED       [  1%]
tests/test_api_routes.py::TestApiRoutes::test_api_users_post FAILED      [  2%]
tests/test_api_routes.py::TestApiRoutes::test_api_users_delete FAILED    [  4%]
tests/test_api_routes.py::TestApiRoutes::test_api_groups_get FAILED      [  5%]
tests/test_api_routes.py::TestApiRoutes::test_api_stats FAILED           [  6%]
tests/test_api_routes.py::TestApiRoutes::test_api_test_connection FAILED [  8%]
tests/test_api_routes_with_auth.py::TestApiRoutesWithAuth::test_api_users_get_authenticated PASSED [  9%]
tests/test_api_routes_with_auth.py::TestApiRoutesWithAuth::test_api_users_post_authenticated PASSED [ 10%]
tests/test_api_routes_with_auth.py::TestApiRoutesWithAuth::test_api_groups_get_authenticated PASSED [ 12%]
tests/test_authentication.py::TestAuthentication::test_login_page_loads PASSED [ 13%]
tests/test_authentication.py::TestAuthentication::test_valid_login PASSED [ 15%]
tests/test_authentication.py::TestAuthentication::test_invalid_login PASSED [ 16%]
tests/test_authentication.py::TestAuthentication::test_logout PASSED     [ 17%]
tests/test_authentication.py::TestAuthentication::test_session_management PASSED [ 19%]
tests/test_authentication.py::TestAuthentication::test_protected_route_without_auth PASSED [ 20%]
tests/test_authentication.py::TestAuthentication::test_protected_route_with_auth FAILED [ 21%]
tests/test_authentication.py::TestAuthentication::test_admin_required_routes FAILED [ 23%]
tests/test_authentication.py::TestAuthentication::test_password_reset_request FAILED [ 24%]
tests/test_authentication_auto.py::TestAuthentication::test_get__login PASSED [ 26%]
tests/test_authentication_auto.py::TestAuthentication::test_post__login FAILED [ 27%]
tests/test_authentication_auto.py::TestAuthentication::test_get__logout PASSED [ 28%]
tests/test_authentication_no_rate_limits.py::TestAuthenticationNoRateLimits::test_login_page_loads FAILED [ 30%]
tests/test_authentication_no_rate_limits.py::TestAuthenticationNoRateLimits::test_valid_login FAILED [ 31%]
tests/test_authentication_rate_limits.py::TestAuthenticationWithRateLimits::test_login_with_rate_limits_disabled FAILED [ 32%]
tests/test_authentication_rate_limits.py::TestAuthenticationWithRateLimits::test_login_with_rate_limits_enabled PASSED [ 34%]
tests/test_authentication_updated.py::TestAuthenticationUpdated::test_login_page_loads FAILED [ 35%]
tests/test_authentication_updated.py::TestAuthenticationUpdated::test_valid_login FAILED [ 36%]
tests/test_authentication_updated.py::TestAuthenticationUpdated::test_invalid_login FAILED [ 38%]
tests/test_authentication_updated.py::TestAuthenticationUpdated::test_logout FAILED [ 39%]
tests/test_authentication_updated.py::TestAuthenticationUpdated::test_session_management PASSED [ 41%]
tests/test_authentication_updated.py::TestAuthenticationUpdated::test_protected_route_without_auth PASSED [ 42%]
tests/test_authentication_updated.py::TestAuthenticationUpdated::test_protected_route_with_auth SKIPPED [ 43%]
tests/test_authentication_updated.py::TestAuthenticationUpdated::test_admin_required_routes SKIPPED [ 45%]
tests/test_authentication_updated.py::TestAuthenticationUpdated::test_password_reset_request SKIPPED [ 46%]
tests/test_basic.py::test_basic_functionality PASSED                     [ 47%]
tests/test_basic.py::test_app_creation PASSED                            [ 49%]
tests/test_basic.py::test_client_creation PASSED                         [ 50%]
tests/test_basic.py::test_sample_data PASSED                             [ 52%]
tests/test_basic.py::test_mock_ldap PASSED                               [ 53%]
tests/test_basic.py::test_app_routes PASSED                              [ 54%]
tests/test_group_management.py::TestGroupManagement::test_group_list_page PASSED [ 56%]
tests/test_group_management.py::TestGroupManagement::test_add_group_form FAILED [ 57%]
tests/test_group_management.py::TestGroupManagement::test_group_membership FAILED [ 58%]
tests/test_group_management.py::TestGroupManagement::test_group_validation PASSED [ 60%]
tests/test_group_management.py::TestGroupManagement::test_group_search PASSED [ 61%]
tests/test_group_management.py::TestGroupManagement::test_group_edit FAILED [ 63%]
tests/test_group_management.py::TestGroupManagement::test_group_delete FAILED [ 64%]
tests/test_group_management.py::TestGroupManagement::test_nested_groups PASSED [ 65%]
tests/test_group_management_auto.py::TestGroupManagement::test_get__groups PASSED [ 67%]
tests/test_group_management_auto.py::TestGroupManagement::test_get__api_groups PASSED [ 68%]
tests/test_other_routes_auto.py::TestOtherRoutes::test_get__ PASSED      [ 69%]
tests/test_other_routes_auto.py::TestOtherRoutes::test_get__settings PASSED [ 71%]
tests/test_other_routes_auto.py::TestOtherRoutes::test_get__api_test_connection PASSED [ 72%]
tests/test_other_routes_auto.py::TestOtherRoutes::test_get__api_stats PASSED [ 73%]
tests/test_page_routes.py::TestPageRoutes::test_index_page PASSED        [ 75%]
tests/test_page_routes.py::TestPageRoutes::test_login_page FAILED        [ 76%]
tests/test_page_routes.py::TestPageRoutes::test_logout_page PASSED       [ 78%]
tests/test_page_routes.py::TestPageRoutes::test_users_page PASSED        [ 79%]
tests/test_page_routes.py::TestPageRoutes::test_groups_page PASSED       [ 80%]
tests/test_page_routes.py::TestPageRoutes::test_settings_page PASSED     [ 82%]
tests/test_page_routes.py::TestPageRoutes::test_authenticated_pages PASSED [ 83%]
tests/test_rate_limiting.py::TestRateLimiting::test_login_rate_limiting PASSED [ 84%]
tests/test_user_management.py::TestUserManagement::test_user_list_page PASSED [ 86%]
tests/test_user_management.py::TestUserManagement::test_add_user_form FAILED [ 87%]
tests/test_user_management.py::TestUserManagement::test_user_validation PASSED [ 89%]
tests/test_user_management.py::TestUserManagement::test_password_strength PASSED [ 90%]
tests/test_user_management.py::TestUserManagement::test_user_search PASSED [ 91%]
tests/test_user_management.py::TestUserManagement::test_user_edit FAILED [ 93%]
tests/test_user_management.py::TestUserManagement::test_user_delete FAILED [ 94%]
tests/test_user_management_auto.py::TestUserManagement::test_get__users PASSED [ 95%]
tests/test_user_management_auto.py::TestUserManagement::test_get__api_users PASSED [ 97%]
tests/test_user_management_auto.py::TestUserManagement::test_post__api_users PASSED [ 98%]
tests/test_user_management_auto.py::TestUserManagement::test_delete__api_users__username_ PASSED [100%]

=================================== FAILURES ===================================
_______________________ TestApiRoutes.test_api_users_get _______________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7f890b2e3040>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560153040'>

    def test_api_users_get(self, client, mock_ldap_connection):
        """Test GET /api/users endpoint."""
        # Mock user data
        mock_user = Mock()
        mock_user.cn.value = 'testuser'
        mock_user.mail.value = 'test@example.com'
        mock_user.givenName.value = 'Test'
        mock_user.sn.value = 'User'
        mock_ldap_connection.entries = [mock_user]
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.get('/api/users')
>           assert response.status_code in [200, 401, 403]
E           assert 302 in [200, 401, 403]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:20: AssertionError
______________________ TestApiRoutes.test_api_users_post _______________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7f890b2e3250>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560473840'>

    def test_api_users_post(self, client, mock_ldap_connection):
        """Test POST /api/users endpoint."""
        user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'first_name': 'New',
            'last_name': 'User',
            'password': 'SecurePass123!'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/api/users',
                                  data=json.dumps(user_data),
                                  content_type='application/json')
>           assert response.status_code in [201, 400, 401, 403, 409]
E           assert 302 in [201, 400, 401, 403, 409]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:41: AssertionError
_____________________ TestApiRoutes.test_api_users_delete ______________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7f890b2e34c0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560439200'>

    def test_api_users_delete(self, client, mock_ldap_connection):
        """Test DELETE /api/users/<username> endpoint."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.delete('/api/users/testuser')
>           assert response.status_code in [200, 401, 403, 404]
E           assert 302 in [200, 401, 403, 404]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:47: AssertionError
______________________ TestApiRoutes.test_api_groups_get _______________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7f890b2e3610>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560442480'>

    def test_api_groups_get(self, client, mock_ldap_connection):
        """Test GET /api/groups endpoint."""
        # Mock group data
        mock_group = Mock()
        mock_group.cn.value = 'testgroup'
        mock_group.description.value = 'Test Group'
        mock_ldap_connection.entries = [mock_group]
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.get('/api/groups')
>           assert response.status_code in [200, 401, 403]
E           assert 302 in [200, 401, 403]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:59: AssertionError
_________________________ TestApiRoutes.test_api_stats _________________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7f890b2e3880>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560159088'>

    def test_api_stats(self, client, mock_ldap_connection):
        """Test GET /api/stats endpoint."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.get('/api/stats')
>           assert response.status_code in [200, 401, 403]
E           assert 302 in [200, 401, 403]
E            +  where 302 = <WrapperTestResponse streamed [302 FOUND]>.status_code

tests/test_api_routes.py:70: AssertionError
____________________ TestApiRoutes.test_api_test_connection ____________________

self = <tests.test_api_routes.TestApiRoutes object at 0x7f890b2e3af0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560460496'>

    def test_api_test_connection(self, client, mock_ldap_connection):
        """Test GET /api/test_connection endpoint."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.get('/api/test_connection')
>           assert response.status_code in [200, 401, 403]
E           assert 404 in [200, 401, 403]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_api_routes.py:81: AssertionError
______________ TestAuthentication.test_protected_route_with_auth _______________

self = <tests.test_authentication.TestAuthentication object at 0x7f890ade4a90>
authenticated_client = <FlaskClient <Flask 'app'>>

    def test_protected_route_with_auth(self, authenticated_client):
        """Test accessing protected route with authentication."""
        response = authenticated_client.get('/dashboard')
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:70: AssertionError
________________ TestAuthentication.test_admin_required_routes _________________

self = <tests.test_authentication.TestAuthentication object at 0x7f890ade4d00>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226550849856'>

    def test_admin_required_routes(self, client, mock_ldap_connection):
        """Test routes that require admin privileges."""
        # Test without admin privileges
        with client.session_transaction() as sess:
            sess['user'] = 'regularuser'
            sess['authenticated'] = True
            sess['is_admin'] = False
    
        response = client.get('/admin')
>       assert response.status_code in [302, 403]
E       assert 404 in [302, 403]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:81: AssertionError
________________ TestAuthentication.test_password_reset_request ________________

self = <tests.test_authentication.TestAuthentication object at 0x7f890ade4f40>
client = <FlaskClient <Flask 'app'>>

    def test_password_reset_request(self, client):
        """Test password reset request."""
        reset_data = {'email': 'user@example.com'}
        response = client.post('/reset_password', data=reset_data)
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:87: AssertionError
_____________________ TestAuthentication.test_post__login ______________________

self = <tests.test_authentication_auto.TestAuthentication object at 0x7f890ade5600>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560447280'>

    def test_post__login(self, client, mock_ldap_connection):
        """Test POST /login"""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            # Login data
            data = {
                'username': 'testuser',
                'password': 'password'
            }
            response = client.post('/login', data=data)
>           assert response.status_code in [200, 302]  # Success or redirect
E           assert 429 in [200, 302]
E            +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_authentication_auto.py:23: AssertionError
_____________ TestAuthenticationNoRateLimits.test_login_page_loads _____________

self = <tests.test_authentication_no_rate_limits.TestAuthenticationNoRateLimits object at 0x7f890ade42b0>
client = <FlaskClient <Flask 'app'>>

    def test_login_page_loads(self, client):
        """Test login page loads correctly."""
        response = client.get('/login')
>       assert response.status_code == 200
E       assert 429 == 200
E        +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_authentication_no_rate_limits.py:11: AssertionError
_______________ TestAuthenticationNoRateLimits.test_valid_login ________________

self = <tests.test_authentication_no_rate_limits.TestAuthenticationNoRateLimits object at 0x7f890ade5990>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560162592'>

    def test_valid_login(self, client, mock_ldap_connection):
        """Test successful login."""
        login_data = {
            'username': 'admin',
            'password': 'correct_password'
        }
    
        # Mock successful LDAP bind
        mock_ldap_connection.bind.return_value = True
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/login', data=login_data, follow_redirects=True)
>           assert response.status_code == 200
E           assert 429 == 200
E            +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_authentication_no_rate_limits.py:26: AssertionError
____ TestAuthenticationWithRateLimits.test_login_with_rate_limits_disabled _____

self = <tests.test_authentication_rate_limits.TestAuthenticationWithRateLimits object at 0x7f890ade5de0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226550833088'>
disable_rate_limits = None

    def test_login_with_rate_limits_disabled(self, client, mock_ldap_connection, disable_rate_limits):
        """Test login with rate limits disabled."""
        login_data = {
            'username': 'admin',
            'password': 'correct_password'
        }
    
        # Mock successful LDAP bind
        mock_ldap_connection.bind.return_value = True
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/login', data=login_data)
>           assert response.status_code in [200, 302]  # Success or redirect
E           assert 429 in [200, 302]
E            +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_authentication_rate_limits.py:19: AssertionError
_______________ TestAuthenticationUpdated.test_login_page_loads ________________

self = <tests.test_authentication_updated.TestAuthenticationUpdated object at 0x7f890ade6740>
client = <FlaskClient <Flask 'app'>>

    def test_login_page_loads(self, client):
        """Test login page loads correctly."""
        response = client.get('/login')
>       assert response.status_code == 200
E       assert 429 == 200
E        +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_authentication_updated.py:11: AssertionError
__________________ TestAuthenticationUpdated.test_valid_login __________________

self = <tests.test_authentication_updated.TestAuthenticationUpdated object at 0x7f890ade69b0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226551081728'>

    def test_valid_login(self, client, mock_ldap_connection):
        """Test successful login."""
        login_data = {
            'username': 'admin',
            'password': 'correct_password'
        }
    
        # Mock successful LDAP bind
        mock_ldap_connection.bind.return_value = True
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/login', data=login_data, follow_redirects=True)
>           assert response.status_code == 200
E           assert 429 == 200
E            +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_authentication_updated.py:26: AssertionError
_________________ TestAuthenticationUpdated.test_invalid_login _________________

self = <tests.test_authentication_updated.TestAuthenticationUpdated object at 0x7f890ade6c20>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560442080'>

    def test_invalid_login(self, client, mock_ldap_connection):
        """Test failed login."""
        login_data = {
            'username': 'admin',
            'password': 'wrong_password'
        }
    
        # Mock failed LDAP bind
        mock_ldap_connection.bind.return_value = False
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/login', data=login_data)
>           assert response.status_code == 200
E           assert 429 == 200
E            +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_authentication_updated.py:40: AssertionError
____________________ TestAuthenticationUpdated.test_logout _____________________

self = <tests.test_authentication_updated.TestAuthenticationUpdated object at 0x7f890ade6e60>
client = <FlaskClient <Flask 'app'>>

    def test_logout(self, client):
        """Test logout functionality."""
        # First login (mock session)
        with client.session_transaction() as sess:
            sess['user'] = 'testuser'
            sess['authenticated'] = True
    
        # Then logout
        response = client.get('/logout', follow_redirects=True)
>       assert response.status_code == 200
E       assert 429 == 200
E        +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_authentication_updated.py:52: AssertionError
___________________ TestGroupManagement.test_add_group_form ____________________

self = <tests.test_group_management.TestGroupManagement object at 0x7f890ae04a90>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560442864'>

    def test_add_group_form(self, client, mock_ldap_connection):
        """Test add group form submission."""
        group_data = {
            'name': 'newgroup',
            'description': 'New Test Group',
            'members': ['user1', 'user2']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_group', data=group_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:30: AssertionError
__________________ TestGroupManagement.test_group_membership ___________________

self = <tests.test_group_management.TestGroupManagement object at 0x7f890ae04d30>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560462176'>
sample_group_data = {'description': 'Test Group Description', 'members': ['testuser1', 'testuser2'], 'name': 'testgroup'}

    def test_group_membership(self, client, mock_ldap_connection, sample_group_data):
        """Test group membership management."""
        # Test adding user to group
        membership_data = {
            'group': sample_group_data['name'],
            'user': 'newuser',
            'action': 'add'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/manage_membership', data=membership_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:43: AssertionError
_____________________ TestGroupManagement.test_group_edit ______________________

self = <tests.test_group_management.TestGroupManagement object at 0x7f890ae05450>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226550777072'>

    def test_group_edit(self, client, mock_ldap_connection):
        """Test group editing."""
        edit_data = {
            'description': 'Updated Group Description',
            'members': ['user1', 'user2', 'user3']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_group/testgroup', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:66: AssertionError
____________________ TestGroupManagement.test_group_delete _____________________

self = <tests.test_group_management.TestGroupManagement object at 0x7f890ae056c0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226550848848'>

    def test_group_delete(self, client, mock_ldap_connection):
        """Test group deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_group/testgroup')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:72: AssertionError
________________________ TestPageRoutes.test_login_page ________________________

self = <tests.test_page_routes.TestPageRoutes object at 0x7f890ac48c40>
client = <FlaskClient <Flask 'app'>>

    def test_login_page(self, client):
        """Test login page."""
        response = client.get('/login')
>       assert response.status_code == 200
E       assert 429 == 200
E        +  where 429 = <WrapperTestResponse streamed [429 TOO MANY REQUESTS]>.status_code

tests/test_page_routes.py:15: AssertionError
____________________ TestUserManagement.test_add_user_form _____________________

self = <tests.test_user_management.TestUserManagement object at 0x7f890ac48fd0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226550391488'>

    def test_add_user_form(self, client, mock_ldap_connection):
        """Test add user form submission."""
        user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'first_name': 'New',
            'last_name': 'User',
            'password': 'SecurePass123!',
            'confirm_password': 'SecurePass123!'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_user', data=user_data, follow_redirects=True)
            # Should either succeed or redirect to login
>           assert response.status_code == 200
E           assert 404 == 200
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:36: AssertionError
______________________ TestUserManagement.test_user_edit _______________________

self = <tests.test_user_management.TestUserManagement object at 0x7f890ac4ab30>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226560158560'>

    def test_user_edit(self, client, mock_ldap_connection):
        """Test user editing."""
        edit_data = {
            'email': 'updated@example.com',
            'first_name': 'Updated',
            'last_name': 'User'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_user/testuser', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:74: AssertionError
_____________________ TestUserManagement.test_user_delete ______________________

self = <tests.test_user_management.TestUserManagement object at 0x7f890ac4ada0>
client = <FlaskClient <Flask 'app'>>
mock_ldap_connection = <Mock name='Connection()' id='140226550343824'>

    def test_user_delete(self, client, mock_ldap_connection):
        """Test user deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_user/testuser')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:80: AssertionError
=============================== warnings summary ===============================
tests/test_api_routes.py::TestApiRoutes::test_api_users_get
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: tagMap is deprecated. Please use TAG_MAP instead.
    warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_api_routes.py::TestApiRoutes::test_api_users_get
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: DeprecationWarning: typeMap is deprecated. Please use TYPE_MAP instead.
    warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_api_routes.py::TestApiRoutes::test_api_users_get
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_limiter/extension.py:336: UserWarning: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================ tests coverage ================================
_______________ coverage: platform linux, python 3.10.12-final-0 _______________

Coverage HTML written to dir htmlcov
=========================== short test summary info ============================
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_users_get - assert 3...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_users_post - assert ...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_users_delete - asser...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_groups_get - assert ...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_stats - assert 302 i...
FAILED tests/test_api_routes.py::TestApiRoutes::test_api_test_connection - as...
FAILED tests/test_authentication.py::TestAuthentication::test_protected_route_with_auth
FAILED tests/test_authentication.py::TestAuthentication::test_admin_required_routes
FAILED tests/test_authentication.py::TestAuthentication::test_password_reset_request
FAILED tests/test_authentication_auto.py::TestAuthentication::test_post__login
FAILED tests/test_authentication_no_rate_limits.py::TestAuthenticationNoRateLimits::test_login_page_loads
FAILED tests/test_authentication_no_rate_limits.py::TestAuthenticationNoRateLimits::test_valid_login
FAILED tests/test_authentication_rate_limits.py::TestAuthenticationWithRateLimits::test_login_with_rate_limits_disabled
FAILED tests/test_authentication_updated.py::TestAuthenticationUpdated::test_login_page_loads
FAILED tests/test_authentication_updated.py::TestAuthenticationUpdated::test_valid_login
FAILED tests/test_authentication_updated.py::TestAuthenticationUpdated::test_invalid_login
FAILED tests/test_authentication_updated.py::TestAuthenticationUpdated::test_logout
FAILED tests/test_group_management.py::TestGroupManagement::test_add_group_form
FAILED tests/test_group_management.py::TestGroupManagement::test_group_membership
FAILED tests/test_group_management.py::TestGroupManagement::test_group_edit
FAILED tests/test_group_management.py::TestGroupManagement::test_group_delete
FAILED tests/test_page_routes.py::TestPageRoutes::test_login_page - assert 42...
FAILED tests/test_user_management.py::TestUserManagement::test_add_user_form
FAILED tests/test_user_management.py::TestUserManagement::test_user_edit - as...
FAILED tests/test_user_management.py::TestUserManagement::test_user_delete - ...
============= 25 failed, 45 passed, 3 skipped, 3 warnings in 2.22s =============

# End of test run 20 - Tue Aug 19 19:53:27 UTC 2025
