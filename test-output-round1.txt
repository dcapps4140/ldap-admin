# Run all the new tests
pytest tests/test_user_management.py -v
pytest tests/test_authentication.py -v
pytest tests/test_group_management.py -v
# Run all tests
pytest tests/ -v
# Run with coverage
pytest tests/ --cov=app --cov-report=html
============================================= test session starts ==============================================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/dcapps/projects/ldap-admin/venv/bin/python
3                                                                                                               cachedir: .pytest_cache
rootdir: /home/dcapps/projects/ldap-admin
plugins: cov-6.2.1, mock-3.14.1, flask-1.3.0
collected 7 items                                                                                              

tests/test_user_management.py::TestUserManagement::test_user_list_page PASSED                            [ 14%]
tests/test_user_management.py::TestUserManagement::test_add_user_form FAILED                             [ 28%]
tests/test_user_management.py::TestUserManagement::test_user_validation PASSED                           [ 42%]
tests/test_user_management.py::TestUserManagement::test_password_strength PASSED                         [ 57%]
tests/test_user_management.py::TestUserManagement::test_user_search PASSED                               [ 71%]
tests/test_user_management.py::TestUserManagement::test_user_edit FAILED                                 [ 85%]
tests/test_user_management.py::TestUserManagement::test_user_delete FAILED                               [100%]

=================================================== FAILURES ===================================================
____________________________________ TestUserManagement.test_add_user_form _____________________________________

self = <tests.test_user_management.TestUserManagement object at 0x7f22f508beb0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='139788094593856'>

    def test_add_user_form(self, client, mock_ldap_connection):
        """Test add user form submission."""
        user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'first_name': 'New',
            'last_name': 'User',
            'password': 'SecurePass123!',
            'confirm_password': 'SecurePass123!'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_user', data=user_data, follow_redirects=True)
            # Should either succeed or redirect to login
>           assert response.status_code == 200
E           assert 404 == 200
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:36: AssertionError
______________________________________ TestUserManagement.test_user_edit _______________________________________

self = <tests.test_user_management.TestUserManagement object at 0x7f22f50883a0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='139788094587856'>

    def test_user_edit(self, client, mock_ldap_connection):
        """Test user editing."""
        edit_data = {
            'email': 'updated@example.com',
            'first_name': 'Updated',
            'last_name': 'User'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_user/testuser', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:74: AssertionError
_____________________________________ TestUserManagement.test_user_delete ______________________________________

self = <tests.test_user_management.TestUserManagement object at 0x7f22f50887c0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='139788094938448'>

    def test_user_delete(self, client, mock_ldap_connection):
        """Test user deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_user/testuser')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:80: AssertionError
=============================================== warnings summary ===============================================
tests/test_user_management.py::TestUserManagement::test_user_list_page
tests/test_user_management.py::TestUserManagement::test_user_list_page
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_wtf/recaptcha/widgets.py:2: Deprecati
onWarning: 'flask.Markup' is deprecated and will be removed in Flask 2.4. Import 'markupsafe.Markup' instead.       from flask import Markup

tests/test_user_management.py::TestUserManagement::test_user_list_page
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: tagMap is deprecated. Please use TAG_MAP instead.                                                         warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_user_management.py::TestUserManagement::test_user_list_page
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: typeMap is deprecated. Please use TYPE_MAP instead.                                                       warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_user_management.py::TestUserManagement::test_user_list_page
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_limiter/extension.py:336: UserWarning
: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.                                                                         warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================================== short test summary info ============================================
FAILED tests/test_user_management.py::TestUserManagement::test_add_user_form - assert 404 == 200
FAILED tests/test_user_management.py::TestUserManagement::test_user_edit - assert 404 in [200, 302]
FAILED tests/test_user_management.py::TestUserManagement::test_user_delete - assert 404 in [200, 302]
=================================== 3 failed, 4 passed, 5 warnings in 1.10s ====================================
============================================= test session starts ==============================================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/dcapps/projects/ldap-admin/venv/bin/python
3                                                                                                               cachedir: .pytest_cache
rootdir: /home/dcapps/projects/ldap-admin
plugins: cov-6.2.1, mock-3.14.1, flask-1.3.0
collected 9 items                                                                                              

tests/test_authentication.py::TestAuthentication::test_login_page_loads PASSED                           [ 11%]
tests/test_authentication.py::TestAuthentication::test_valid_login PASSED                                [ 22%]
tests/test_authentication.py::TestAuthentication::test_invalid_login PASSED                              [ 33%]
tests/test_authentication.py::TestAuthentication::test_logout PASSED                                     [ 44%]
tests/test_authentication.py::TestAuthentication::test_session_management PASSED                         [ 55%]
tests/test_authentication.py::TestAuthentication::test_protected_route_without_auth PASSED               [ 66%]
tests/test_authentication.py::TestAuthentication::test_protected_route_with_auth FAILED                  [ 77%]
tests/test_authentication.py::TestAuthentication::test_admin_required_routes FAILED                      [ 88%]
tests/test_authentication.py::TestAuthentication::test_password_reset_request FAILED                     [100%]

=================================================== FAILURES ===================================================
______________________________ TestAuthentication.test_protected_route_with_auth _______________________________

self = <tests.test_authentication.TestAuthentication object at 0x7ff8b13348b0>
authenticated_client = <FlaskClient <Flask 'app'>>

    def test_protected_route_with_auth(self, authenticated_client):
        """Test accessing protected route with authentication."""
        response = authenticated_client.get('/dashboard')
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:70: AssertionError
________________________________ TestAuthentication.test_admin_required_routes _________________________________

self = <tests.test_authentication.TestAuthentication object at 0x7ff8b1334b20>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140706083137584'>

    def test_admin_required_routes(self, client, mock_ldap_connection):
        """Test routes that require admin privileges."""
        # Test without admin privileges
        with client.session_transaction() as sess:
            sess['user'] = 'regularuser'
            sess['authenticated'] = True
            sess['is_admin'] = False
    
        response = client.get('/admin')
>       assert response.status_code in [302, 403]
E       assert 404 in [302, 403]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:81: AssertionError
________________________________ TestAuthentication.test_password_reset_request ________________________________

self = <tests.test_authentication.TestAuthentication object at 0x7ff8b1334d60>
client = <FlaskClient <Flask 'app'>>

    def test_password_reset_request(self, client):
        """Test password reset request."""
        reset_data = {'email': 'user@example.com'}
        response = client.post('/reset_password', data=reset_data)
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:87: AssertionError
=============================================== warnings summary ===============================================
tests/test_authentication.py::TestAuthentication::test_login_page_loads
tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_wtf/recaptcha/widgets.py:2: Deprecati
onWarning: 'flask.Markup' is deprecated and will be removed in Flask 2.4. Import 'markupsafe.Markup' instead.       from flask import Markup

tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: tagMap is deprecated. Please use TAG_MAP instead.                                                         warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: typeMap is deprecated. Please use TYPE_MAP instead.                                                       warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_limiter/extension.py:336: UserWarning
: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.                                                                         warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================================== short test summary info ============================================
FAILED tests/test_authentication.py::TestAuthentication::test_protected_route_with_auth - assert 404 in [200, 30
2]                                                                                                              FAILED tests/test_authentication.py::TestAuthentication::test_admin_required_routes - assert 404 in [302, 403]
FAILED tests/test_authentication.py::TestAuthentication::test_password_reset_request - assert 404 in [200, 302]
=================================== 3 failed, 6 passed, 5 warnings in 1.65s ====================================
============================================= test session starts ==============================================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/dcapps/projects/ldap-admin/venv/bin/python
3                                                                                                               cachedir: .pytest_cache
rootdir: /home/dcapps/projects/ldap-admin
plugins: cov-6.2.1, mock-3.14.1, flask-1.3.0
collected 8 items                                                                                              

tests/test_group_management.py::TestGroupManagement::test_group_list_page PASSED                         [ 12%]
tests/test_group_management.py::TestGroupManagement::test_add_group_form FAILED                          [ 25%]
tests/test_group_management.py::TestGroupManagement::test_group_membership FAILED                        [ 37%]
tests/test_group_management.py::TestGroupManagement::test_group_validation PASSED                        [ 50%]
tests/test_group_management.py::TestGroupManagement::test_group_search PASSED                            [ 62%]
tests/test_group_management.py::TestGroupManagement::test_group_edit FAILED                              [ 75%]
tests/test_group_management.py::TestGroupManagement::test_group_delete FAILED                            [ 87%]
tests/test_group_management.py::TestGroupManagement::test_nested_groups PASSED                           [100%]

=================================================== FAILURES ===================================================
___________________________________ TestGroupManagement.test_add_group_form ____________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fc8f803fe50>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140501109268368'>

    def test_add_group_form(self, client, mock_ldap_connection):
        """Test add group form submission."""
        group_data = {
            'name': 'newgroup',
            'description': 'New Test Group',
            'members': ['user1', 'user2']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_group', data=group_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:30: AssertionError
__________________________________ TestGroupManagement.test_group_membership ___________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fc8f803c370>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140501109785024'>
sample_group_data = {'description': 'Test Group Description', 'members': ['testuser1', 'testuser2'], 'name': 'te
stgroup'}                                                                                                       
    def test_group_membership(self, client, mock_ldap_connection, sample_group_data):
        """Test group membership management."""
        # Test adding user to group
        membership_data = {
            'group': sample_group_data['name'],
            'user': 'newuser',
            'action': 'add'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/manage_membership', data=membership_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:43: AssertionError
_____________________________________ TestGroupManagement.test_group_edit ______________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fc8f803cc40>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140501107984032'>

    def test_group_edit(self, client, mock_ldap_connection):
        """Test group editing."""
        edit_data = {
            'description': 'Updated Group Description',
            'members': ['user1', 'user2', 'user3']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_group/testgroup', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:66: AssertionError
____________________________________ TestGroupManagement.test_group_delete _____________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fc8f803ceb0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140501107993104'>

    def test_group_delete(self, client, mock_ldap_connection):
        """Test group deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_group/testgroup')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:72: AssertionError
=============================================== warnings summary ===============================================
tests/test_group_management.py::TestGroupManagement::test_group_list_page
tests/test_group_management.py::TestGroupManagement::test_group_list_page
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_wtf/recaptcha/widgets.py:2: Deprecati
onWarning: 'flask.Markup' is deprecated and will be removed in Flask 2.4. Import 'markupsafe.Markup' instead.       from flask import Markup

tests/test_group_management.py::TestGroupManagement::test_group_list_page
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: tagMap is deprecated. Please use TAG_MAP instead.                                                         warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_group_management.py::TestGroupManagement::test_group_list_page
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: typeMap is deprecated. Please use TYPE_MAP instead.                                                       warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_group_management.py::TestGroupManagement::test_group_list_page
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_limiter/extension.py:336: UserWarning
: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.                                                                         warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================================== short test summary info ============================================
FAILED tests/test_group_management.py::TestGroupManagement::test_add_group_form - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_group_membership - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_group_edit - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_group_delete - assert 404 in [200, 302]
=================================== 4 failed, 4 passed, 5 warnings in 1.10s ====================================
============================================= test session starts ==============================================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0 -- /home/dcapps/projects/ldap-admin/venv/bin/python
3                                                                                                               cachedir: .pytest_cache
rootdir: /home/dcapps/projects/ldap-admin
plugins: cov-6.2.1, mock-3.14.1, flask-1.3.0
collected 29 items                                                                                             

tests/test_authentication.py::TestAuthentication::test_login_page_loads PASSED                           [  3%]
tests/test_authentication.py::TestAuthentication::test_valid_login PASSED                                [  6%]
tests/test_authentication.py::TestAuthentication::test_invalid_login PASSED                              [ 10%]
tests/test_authentication.py::TestAuthentication::test_logout PASSED                                     [ 13%]
tests/test_authentication.py::TestAuthentication::test_session_management PASSED                         [ 17%]
tests/test_authentication.py::TestAuthentication::test_protected_route_without_auth PASSED               [ 20%]
tests/test_authentication.py::TestAuthentication::test_protected_route_with_auth FAILED                  [ 24%]
tests/test_authentication.py::TestAuthentication::test_admin_required_routes FAILED                      [ 27%]
tests/test_authentication.py::TestAuthentication::test_password_reset_request FAILED                     [ 31%]
tests/test_basic.py::test_basic_functionality PASSED                                                     [ 34%]
tests/test_basic.py::test_app_creation PASSED                                                            [ 37%]
tests/test_basic.py::test_client_creation PASSED                                                         [ 41%]
tests/test_basic.py::test_sample_data PASSED                                                             [ 44%]
tests/test_basic.py::test_mock_ldap PASSED                                                               [ 48%]
tests/test_group_management.py::TestGroupManagement::test_group_list_page PASSED                         [ 51%]
tests/test_group_management.py::TestGroupManagement::test_add_group_form FAILED                          [ 55%]
tests/test_group_management.py::TestGroupManagement::test_group_membership FAILED                        [ 58%]
tests/test_group_management.py::TestGroupManagement::test_group_validation PASSED                        [ 62%]
tests/test_group_management.py::TestGroupManagement::test_group_search PASSED                            [ 65%]
tests/test_group_management.py::TestGroupManagement::test_group_edit FAILED                              [ 68%]
tests/test_group_management.py::TestGroupManagement::test_group_delete FAILED                            [ 72%]
tests/test_group_management.py::TestGroupManagement::test_nested_groups PASSED                           [ 75%]
tests/test_user_management.py::TestUserManagement::test_user_list_page PASSED                            [ 79%]
tests/test_user_management.py::TestUserManagement::test_add_user_form FAILED                             [ 82%]
tests/test_user_management.py::TestUserManagement::test_user_validation PASSED                           [ 86%]
tests/test_user_management.py::TestUserManagement::test_password_strength PASSED                         [ 89%]
tests/test_user_management.py::TestUserManagement::test_user_search PASSED                               [ 93%]
tests/test_user_management.py::TestUserManagement::test_user_edit FAILED                                 [ 96%]
tests/test_user_management.py::TestUserManagement::test_user_delete FAILED                               [100%]

=================================================== FAILURES ===================================================
______________________________ TestAuthentication.test_protected_route_with_auth _______________________________

self = <tests.test_authentication.TestAuthentication object at 0x7fed7c13c790>
authenticated_client = <FlaskClient <Flask 'app'>>

    def test_protected_route_with_auth(self, authenticated_client):
        """Test accessing protected route with authentication."""
        response = authenticated_client.get('/dashboard')
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:70: AssertionError
________________________________ TestAuthentication.test_admin_required_routes _________________________________

self = <tests.test_authentication.TestAuthentication object at 0x7fed7c13ca00>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140657948062768'>

    def test_admin_required_routes(self, client, mock_ldap_connection):
        """Test routes that require admin privileges."""
        # Test without admin privileges
        with client.session_transaction() as sess:
            sess['user'] = 'regularuser'
            sess['authenticated'] = True
            sess['is_admin'] = False
    
        response = client.get('/admin')
>       assert response.status_code in [302, 403]
E       assert 404 in [302, 403]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:81: AssertionError
________________________________ TestAuthentication.test_password_reset_request ________________________________

self = <tests.test_authentication.TestAuthentication object at 0x7fed7c13cc40>
client = <FlaskClient <Flask 'app'>>

    def test_password_reset_request(self, client):
        """Test password reset request."""
        reset_data = {'email': 'user@example.com'}
        response = client.post('/reset_password', data=reset_data)
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:87: AssertionError
___________________________________ TestGroupManagement.test_add_group_form ____________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fed7c13dcc0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140657947653024'>

    def test_add_group_form(self, client, mock_ldap_connection):
        """Test add group form submission."""
        group_data = {
            'name': 'newgroup',
            'description': 'New Test Group',
            'members': ['user1', 'user2']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_group', data=group_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:30: AssertionError
__________________________________ TestGroupManagement.test_group_membership ___________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fed7c13d450>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140657947497408'>
sample_group_data = {'description': 'Test Group Description', 'members': ['testuser1', 'testuser2'], 'name': 'te
stgroup'}                                                                                                       
    def test_group_membership(self, client, mock_ldap_connection, sample_group_data):
        """Test group membership management."""
        # Test adding user to group
        membership_data = {
            'group': sample_group_data['name'],
            'user': 'newuser',
            'action': 'add'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/manage_membership', data=membership_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:43: AssertionError
_____________________________________ TestGroupManagement.test_group_edit ______________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fed7c13e3e0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140657947641216'>

    def test_group_edit(self, client, mock_ldap_connection):
        """Test group editing."""
        edit_data = {
            'description': 'Updated Group Description',
            'members': ['user1', 'user2', 'user3']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_group/testgroup', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:66: AssertionError
____________________________________ TestGroupManagement.test_group_delete _____________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fed7c13e650>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140657965647280'>

    def test_group_delete(self, client, mock_ldap_connection):
        """Test group deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_group/testgroup')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:72: AssertionError
____________________________________ TestUserManagement.test_add_user_form _____________________________________

self = <tests.test_user_management.TestUserManagement object at 0x7fed7c13efe0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140657947508496'>

    def test_add_user_form(self, client, mock_ldap_connection):
        """Test add user form submission."""
        user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'first_name': 'New',
            'last_name': 'User',
            'password': 'SecurePass123!',
            'confirm_password': 'SecurePass123!'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_user', data=user_data, follow_redirects=True)
            # Should either succeed or redirect to login
>           assert response.status_code == 200
E           assert 404 == 200
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:36: AssertionError
______________________________________ TestUserManagement.test_user_edit _______________________________________

self = <tests.test_user_management.TestUserManagement object at 0x7fed7c13f940>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140657946444128'>

    def test_user_edit(self, client, mock_ldap_connection):
        """Test user editing."""
        edit_data = {
            'email': 'updated@example.com',
            'first_name': 'Updated',
            'last_name': 'User'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_user/testuser', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:74: AssertionError
_____________________________________ TestUserManagement.test_user_delete ______________________________________

self = <tests.test_user_management.TestUserManagement object at 0x7fed7c13fbb0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140657948001136'>

    def test_user_delete(self, client, mock_ldap_connection):
        """Test user deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_user/testuser')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:80: AssertionError
=============================================== warnings summary ===============================================
tests/test_authentication.py::TestAuthentication::test_login_page_loads
tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_wtf/recaptcha/widgets.py:2: Deprecati
onWarning: 'flask.Markup' is deprecated and will be removed in Flask 2.4. Import 'markupsafe.Markup' instead.       from flask import Markup

tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: tagMap is deprecated. Please use TAG_MAP instead.                                                         warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: typeMap is deprecated. Please use TYPE_MAP instead.                                                       warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_limiter/extension.py:336: UserWarning
: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.                                                                         warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================================== short test summary info ============================================
FAILED tests/test_authentication.py::TestAuthentication::test_protected_route_with_auth - assert 404 in [200, 30
2]                                                                                                              FAILED tests/test_authentication.py::TestAuthentication::test_admin_required_routes - assert 404 in [302, 403]
FAILED tests/test_authentication.py::TestAuthentication::test_password_reset_request - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_add_group_form - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_group_membership - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_group_edit - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_group_delete - assert 404 in [200, 302]
FAILED tests/test_user_management.py::TestUserManagement::test_add_user_form - assert 404 == 200
FAILED tests/test_user_management.py::TestUserManagement::test_user_edit - assert 404 in [200, 302]
FAILED tests/test_user_management.py::TestUserManagement::test_user_delete - assert 404 in [200, 302]
================================== 10 failed, 19 passed, 5 warnings in 1.75s ===================================
============================================= test session starts ==============================================
platform linux -- Python 3.10.12, pytest-8.4.1, pluggy-1.6.0
rootdir: /home/dcapps/projects/ldap-admin
plugins: cov-6.2.1, mock-3.14.1, flask-1.3.0
collected 29 items                                                                                             

tests/test_authentication.py ......FFF                                                                   [ 31%]
tests/test_basic.py .....                                                                                [ 48%]
tests/test_group_management.py .FF..FF.                                                                  [ 75%]
tests/test_user_management.py .F...FF                                                                    [100%]

=================================================== FAILURES ===================================================
______________________________ TestAuthentication.test_protected_route_with_auth _______________________________

self = <tests.test_authentication.TestAuthentication object at 0x7fbb9c892200>
authenticated_client = <FlaskClient <Flask 'app'>>

    def test_protected_route_with_auth(self, authenticated_client):
        """Test accessing protected route with authentication."""
        response = authenticated_client.get('/dashboard')
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:70: AssertionError
________________________________ TestAuthentication.test_admin_required_routes _________________________________

self = <tests.test_authentication.TestAuthentication object at 0x7fbb9c892470>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140443744370064'>

    def test_admin_required_routes(self, client, mock_ldap_connection):
        """Test routes that require admin privileges."""
        # Test without admin privileges
        with client.session_transaction() as sess:
            sess['user'] = 'regularuser'
            sess['authenticated'] = True
            sess['is_admin'] = False
    
        response = client.get('/admin')
>       assert response.status_code in [302, 403]
E       assert 404 in [302, 403]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:81: AssertionError
________________________________ TestAuthentication.test_password_reset_request ________________________________

self = <tests.test_authentication.TestAuthentication object at 0x7fbb9c8926b0>
client = <FlaskClient <Flask 'app'>>

    def test_password_reset_request(self, client):
        """Test password reset request."""
        reset_data = {'email': 'user@example.com'}
        response = client.post('/reset_password', data=reset_data)
>       assert response.status_code in [200, 302]
E       assert 404 in [200, 302]
E        +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_authentication.py:87: AssertionError
___________________________________ TestGroupManagement.test_add_group_form ____________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fbb9c893bb0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140443744015920'>

    def test_add_group_form(self, client, mock_ldap_connection):
        """Test add group form submission."""
        group_data = {
            'name': 'newgroup',
            'description': 'New Test Group',
            'members': ['user1', 'user2']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_group', data=group_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:30: AssertionError
__________________________________ TestGroupManagement.test_group_membership ___________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fbb9c893e50>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140443744370592'>
sample_group_data = {'description': 'Test Group Description', 'members': ['testuser1', 'testuser2'], 'name': 'te
stgroup'}                                                                                                       
    def test_group_membership(self, client, mock_ldap_connection, sample_group_data):
        """Test group membership management."""
        # Test adding user to group
        membership_data = {
            'group': sample_group_data['name'],
            'user': 'newuser',
            'action': 'add'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/manage_membership', data=membership_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:43: AssertionError
_____________________________________ TestGroupManagement.test_group_edit ______________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fbb9c893070>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140443742758048'>

    def test_group_edit(self, client, mock_ldap_connection):
        """Test group editing."""
        edit_data = {
            'description': 'Updated Group Description',
            'members': ['user1', 'user2', 'user3']
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_group/testgroup', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:66: AssertionError
____________________________________ TestGroupManagement.test_group_delete _____________________________________

self = <tests.test_group_management.TestGroupManagement object at 0x7fbb9c892890>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140443742782848'>

    def test_group_delete(self, client, mock_ldap_connection):
        """Test group deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_group/testgroup')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_group_management.py:72: AssertionError
____________________________________ TestUserManagement.test_add_user_form _____________________________________

self = <tests.test_user_management.TestUserManagement object at 0x7fbb9c8c8a60>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140443742839200'>

    def test_add_user_form(self, client, mock_ldap_connection):
        """Test add user form submission."""
        user_data = {
            'username': 'newuser',
            'email': 'newuser@example.com',
            'first_name': 'New',
            'last_name': 'User',
            'password': 'SecurePass123!',
            'confirm_password': 'SecurePass123!'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/add_user', data=user_data, follow_redirects=True)
            # Should either succeed or redirect to login
>           assert response.status_code == 200
E           assert 404 == 200
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:36: AssertionError
______________________________________ TestUserManagement.test_user_edit _______________________________________

self = <tests.test_user_management.TestUserManagement object at 0x7fbb9c8c93c0>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140443744365888'>

    def test_user_edit(self, client, mock_ldap_connection):
        """Test user editing."""
        edit_data = {
            'email': 'updated@example.com',
            'first_name': 'Updated',
            'last_name': 'User'
        }
    
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/edit_user/testuser', data=edit_data)
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:74: AssertionError
_____________________________________ TestUserManagement.test_user_delete ______________________________________

self = <tests.test_user_management.TestUserManagement object at 0x7fbb9c8c9630>
client = <FlaskClient <Flask 'app'>>, mock_ldap_connection = <Mock name='Connection()' id='140443744380304'>

    def test_user_delete(self, client, mock_ldap_connection):
        """Test user deletion."""
        with patch('app.get_ldap_connection', return_value=mock_ldap_connection):
            response = client.post('/delete_user/testuser')
>           assert response.status_code in [200, 302]
E           assert 404 in [200, 302]
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

tests/test_user_management.py:80: AssertionError
=============================================== warnings summary ===============================================
tests/test_authentication.py::TestAuthentication::test_login_page_loads
tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_wtf/recaptcha/widgets.py:2: Deprecati
onWarning: 'flask.Markup' is deprecated and will be removed in Flask 2.4. Import 'markupsafe.Markup' instead.       from flask import Markup

tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: tagMap is deprecated. Please use TAG_MAP instead.                                                         warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/pyasn1/codec/ber/encoder.py:952: Deprecatio
nWarning: typeMap is deprecated. Please use TYPE_MAP instead.                                                       warnings.warn(f"{attr} is deprecated. Please use {newAttr} instead.", DeprecationWarning)

tests/test_authentication.py::TestAuthentication::test_login_page_loads
  /home/dcapps/projects/ldap-admin/venv/lib/python3.10/site-packages/flask_limiter/extension.py:336: UserWarning
: Using the in-memory storage for tracking rate limits as no storage was explicitly specified. This is not recommended for production use. See: https://flask-limiter.readthedocs.io#configuring-a-storage-backend for documentation about configuring the storage backend.                                                                         warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================================ tests coverage ================================================
_______________________________ coverage: platform linux, python 3.10.12-final-0 _______________________________

Coverage HTML written to dir htmlcov
=========================================== short test summary info ============================================
FAILED tests/test_authentication.py::TestAuthentication::test_protected_route_with_auth - assert 404 in [200, 30
2]                                                                                                              FAILED tests/test_authentication.py::TestAuthentication::test_admin_required_routes - assert 404 in [302, 403]
FAILED tests/test_authentication.py::TestAuthentication::test_password_reset_request - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_add_group_form - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_group_membership - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_group_edit - assert 404 in [200, 302]
FAILED tests/test_group_management.py::TestGroupManagement::test_group_delete - assert 404 in [200, 302]
FAILED tests/test_user_management.py::TestUserManagement::test_add_user_form - assert 404 == 200
FAILED tests/test_user_management.py::TestUserManagement::test_user_edit - assert 404 in [200, 302]
FAILED tests/test_user_management.py::TestUserManagement::test_user_delete - assert 404 in [200, 302]
================================== 10 failed, 19 passed, 5 warnings in 2.08s ===================================
